'''
26. 删除排序数组中的重复项
给定一个排序数组，你需要在 原地 删除重复出现的元素，使得每个元素只出现一次，返回移除后数组的新长度。
不要使用额外的数组空间，你必须在 原地 修改输入数组 并在使用 O(1) 额外空间的条件下完成。

示例 1:
给定数组 nums = [1,1,2],
函数应该返回新的长度 2, 并且原数组 nums 的前两个元素被修改为 1, 2。
你不需要考虑数组中超出新长度后面的元素。

示例 2:
给定 nums = [0,0,1,1,1,2,2,3,3,4],
函数应该返回新的长度 5, 并且原数组 nums 的前五个元素被修改为 0, 1, 2, 3, 4。
你不需要考虑数组中超出新长度后面的元素。


解题思路：
双指针：O(n)
注意数组是有序的，那么重复的元素一定相邻。
要求删除重复元素，实际上就是将不重复的元素移动到数组左侧。
用两个指针i和j,比较nums[i]和nums[j] 是否相等，
如果相等，j后移一位，
如果不相等，将j位置的元素复制到i+1位置上，i后移一位，j后移一位
重复上述过程，知道j等于数组长度
返回i+1，即为新数组长度
'''


class Solution:
    def remove_duplicates(self, nums):
        if not nums:
            return 0
        i = 0
        for j in range(1, len(nums)):
            if nums[i] != nums[j]:
                i += 1
                nums[i] = nums[j]
        return i + 1


if __name__ == "__main__":
    s = Solution()
    nums = [0, 0, 1, 1, 1, 2, 2, 3, 3, 4]
    length = s.remove_duplicates(nums)
    print(length)
